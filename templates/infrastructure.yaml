AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestrutura para landing page de download de e-book'

Parameters:
  DomainName:
    Type: String
    Description: Nome de domínio para a landing page
    Default: ebook.exemplo.com
  
  EmailNotification:
    Type: String
    Description: Email para receber notificações de download
    Default: seu-email@exemplo.com
    
  # Parâmetro para o ARN do certificado ACM
  CertificateArn:
    Type: String
    Description: ARN do certificado SSL no ACM
    Default: ''

Resources:
  # S3 Bucket para armazenar a landing page estática
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-website-bucket"

  # Política de bucket para permitir acesso público de leitura
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Aliases:
          - !Ref DomainName

  # DynamoDB Table para armazenar inscrições
  SubscribersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-subscribers"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subscribers-table"

  # IAM Role para Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt SubscribersTable.Arn
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  # Lambda Function para processar inscrições
  SubscribeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-subscribe"
      Runtime: nodejs16.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            try {
              // Parse request body
              const body = JSON.parse(event.body);
              const { name, email, company, position, timestamp } = body;
              
              // Validate required fields
              if (!name || !email || !company || !position) {
                return {
                  statusCode: 400,
                  headers: {
                    'Access-Control-Allow-Origin': '*',
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ message: 'Missing required fields' })
                };
              }
              
              // Inicializar AWS SDK
              const AWS = require('aws-sdk');
              const dynamoDB = new AWS.DynamoDB.DocumentClient({ region: process.env.AWS_REGION });
              const ses = new AWS.SES({ region: process.env.AWS_REGION });
              
              // Save to DynamoDB
              await dynamoDB.put({
                TableName: process.env.TABLE_NAME,
                Item: {
                  email,
                  name,
                  company,
                  position,
                  timestamp: timestamp || new Date().toISOString()
                }
              }).promise();
              
              // Send notification email
              await ses.sendEmail({
                Source: 'no-reply@' + process.env.DOMAIN_NAME,
                Destination: {
                  ToAddresses: [process.env.NOTIFICATION_EMAIL]
                },
                Message: {
                  Subject: {
                    Data: 'Novo download do e-book'
                  },
                  Body: {
                    Text: {
                      Data: `Novo download do e-book "Tendências da Indústria em Santa Catarina"
                      
                      Nome: ${name}
                      Email: ${email}
                      Empresa: ${company}
                      Cargo: ${position}
                      Data/Hora: ${timestamp || new Date().toISOString()}`
                    }
                  }
                }
              }).promise();
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                  message: 'Subscription successful',
                  downloadUrl: `https://${process.env.DOMAIN_NAME}/assets/tendencias-industria-sc.pdf`
                })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: 'Internal server error' })
              };
            }
          };
      Environment:
        Variables:
          TABLE_NAME: !Ref SubscribersTable
          NOTIFICATION_EMAIL: !Ref EmailNotification
          DOMAIN_NAME: !Ref DomainName
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subscribe-function"

  # API Gateway REST API
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      Description: API para processar inscrições de e-book
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: subscribe

  # API Gateway Method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubscribeFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway CORS Method
  ApiCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethod
      - ApiCorsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SubscribeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/subscribe"

  # Route53 Record Set (opcional - requer zona hospedada existente)
  # DomainRecordSet:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneName: !Sub "${DomainName}."
  #     Name: !Ref DomainName
  #     Type: A
  #     AliasTarget:
  #       DNSName: !GetAtt CloudFrontDistribution.DomainName
  #       HostedZoneId: Z2FDTNDATAQYW2 # ID fixo para CloudFront

Outputs:
  WebsiteURL:
    Description: URL do site S3
    Value: !GetAtt WebsiteBucket.WebsiteURL

  CloudFrontURL:
    Description: URL de distribuição do CloudFront
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"

  ApiEndpoint:
    Description: URL do endpoint da API
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/subscribe"

  CustomDomainURL:
    Description: URL personalizado (quando configurado no Route53)
    Value: !Sub "https://${DomainName}"
